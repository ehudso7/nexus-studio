generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organizations for true multi-tenancy
model Organization {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  logo              String?
  description       String?
  website           String?
  
  // Billing
  plan              PricingPlan        @default(FREE)
  planLimits        Json               @default("{}")
  stripeCustomerId  String?            @unique
  billingEmail      String?
  taxId             String?
  
  // Settings
  settings          Json               @default("{}")
  features          String[]           @default([])
  
  // Timestamps
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  
  // Relations
  members           OrganizationMember[]
  projects          Project[]
  invitations       OrganizationInvitation[]
  apiKeys           ApiKey[]
  subscription      Subscription?
  payments          Payment[]
  usage             Usage[]
  auditLogs         AuditLog[]
  webhooks          Webhook[]
  ssoConfigs        SSOConfig[]
  
  @@index([slug])
}

model OrganizationMember {
  id              String   @id @default(cuid())
  organizationId  String
  userId          String
  role            OrganizationRole
  joinedAt        DateTime @default(now())
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model OrganizationInvitation {
  id              String   @id @default(cuid())
  organizationId  String
  email           String
  role            OrganizationRole
  token           String   @unique
  expiresAt       DateTime
  acceptedAt      DateTime?
  createdAt       DateTime @default(now())
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([email])
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  avatar            String?
  password          String?
  emailVerified     DateTime?
  twoFactorEnabled  Boolean            @default(false)
  twoFactorSecret   String?
  provider          AuthProvider?
  providerId        String?
  role              UserRole           @default(USER)
  stripeCustomerId  String?            @unique
  
  // Timestamps
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  lastLoginAt       DateTime?
  
  // Relations
  organizations     OrganizationMember[]
  projects          Project[]          // Personal projects
  projectMembers    ProjectMember[]
  apiKeys           ApiKey[]
  sessions          Session[]
  auditLogs         AuditLog[]
  deployments       Deployment[]
  collaborations    Collaboration[]
  notifications     Notification[]
  
  @@index([email])
  @@index([stripeCustomerId])
}

// Enhanced Subscription model
model Subscription {
  id                    String   @id @default(cuid())
  organizationId        String   @unique
  stripeCustomerId      String
  stripeSubscriptionId  String   @unique
  stripePriceId         String
  
  plan                  PricingPlan
  billingPeriod         BillingPeriod
  status                SubscriptionStatus
  
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  canceledAt            DateTime?
  trialEnd              DateTime?
  
  metadata              Json     @default("{}")
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([stripeSubscriptionId])
}

// Payment history
model Payment {
  id                    String   @id @default(cuid())
  organizationId        String
  stripeInvoiceId       String   @unique
  stripePaymentIntentId String?
  
  amount                Int
  currency              String
  status                PaymentStatus
  description           String?
  
  metadata              Json     @default("{}")
  
  createdAt             DateTime @default(now())
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([status])
}

// Usage tracking
model Usage {
  id              String   @id @default(cuid())
  organizationId  String
  period          DateTime // First day of the month
  
  // Metrics
  projects        Int      @default(0)
  teamMembers     Int      @default(0)
  storage         Float    @default(0) // GB
  deployments     Int      @default(0)
  apiRequests     Int      @default(0)
  aiRequests      Int      @default(0)
  bandwidth       Float    @default(0) // GB
  
  // Custom metrics
  customMetrics   Json     @default("{}")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, period])
  @@index([organizationId])
  @@index([period])
}

// Webhook events for Stripe
model WebhookEvent {
  id              String   @id @default(cuid())
  stripeEventId   String   @unique
  type            String
  processed       Boolean  @default(false)
  error           String?
  data            Json
  
  createdAt       DateTime @default(now())
  
  @@index([type])
  @@index([processed])
}

// Payment methods
model PaymentMethod {
  id                    String   @id @default(cuid())
  stripePaymentMethodId String   @unique
  stripeCustomerId      String
  
  type                  String
  card                  Json?    // Card details (last4, brand, etc)
  isDefault             Boolean  @default(false)
  
  createdAt             DateTime @default(now())
  
  @@index([stripeCustomerId])
}

// SSO Configuration
model SSOConfig {
  id              String   @id @default(cuid())
  organizationId  String
  provider        SSOProvider
  
  // SAML Config
  entryPoint      String?
  issuer          String?
  certificate     String?
  
  // OIDC Config
  clientId        String?
  clientSecret    String?
  discoveryUrl    String?
  
  isActive        Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, provider])
}

// Webhooks for organizations
model Webhook {
  id              String   @id @default(cuid())
  organizationId  String
  url             String
  events          String[]
  secret          String
  isActive        Boolean  @default(true)
  
  lastTriggeredAt DateTime?
  failureCount    Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
}

// Analytics Events
model AnalyticsEvent {
  id              String   @id @default(cuid())
  organizationId  String?
  projectId       String?
  userId          String?
  
  eventType       String
  eventData       Json     @default("{}")
  
  // Context
  sessionId       String?
  ipAddress       String?
  userAgent       String?
  referrer        String?
  
  createdAt       DateTime @default(now())
  
  @@index([organizationId])
  @@index([projectId])
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

// Export/Import Jobs
model DataExport {
  id              String   @id @default(cuid())
  organizationId  String
  userId          String
  
  type            ExportType
  status          JobStatus
  format          ExportFormat
  
  fileUrl         String?
  error           String?
  
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  expiresAt       DateTime?
  
  @@index([organizationId])
  @@index([userId])
  @@index([status])
}

// Enhanced Project model with organization support
model Project {
  id               String             @id @default(cuid())
  name             String
  slug             String
  description      String?
  icon             String?
  
  // Ownership
  organizationId   String?            // Organization-owned
  ownerId          String             // User who created it
  
  type             ProjectType
  status           ProjectStatus      @default(DRAFT)
  visibility       ProjectVisibility  @default(PRIVATE)
  settings         Json               @default("{}")
  metadata         Json               @default("{}")
  
  // Domain settings
  publishedVersion String?
  domain           String?            @unique
  customDomains    String[]           @default([])
  sslEnabled       Boolean            @default(true)
  
  // Timestamps
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  
  // Relations
  organization     Organization?      @relation(fields: [organizationId], references: [id])
  owner            User               @relation(fields: [ownerId], references: [id])
  members          ProjectMember[]
  pages            Page[]
  components       Component[]
  assets           Asset[]
  apis             Api[]
  databases        Database[]
  workflows        Workflow[]
  deployments      Deployment[]
  versions         Version[]
  collaborations   Collaboration[]
  auditLogs        AuditLog[]
  analytics        Analytics[]
  
  @@unique([organizationId, slug])
  @@index([slug])
  @@index([organizationId])
  @@index([ownerId])
  @@index([domain])
}

// Keep all other existing models...
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  permissions String[]
  
  // Can belong to user or organization
  userId      String?
  organizationId String?
  
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  revokedAt   DateTime?
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([key])
  @@index([userId])
  @@index([organizationId])
}

model ProjectMember {
  id        String                 @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole
  joinedAt  DateTime               @default(now())
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model Page {
  id          String        @id @default(cuid())
  projectId   String
  name        String
  path        String
  title       String?
  description String?
  content     Json
  settings    Json          @default("{}")
  isHomePage  Boolean       @default(false)
  status      PageStatus    @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  seo       PageSeo?
  
  @@unique([projectId, path])
  @@index([projectId])
}

model PageSeo {
  id               String  @id @default(cuid())
  pageId           String  @unique
  metaTitle        String?
  metaDescription  String?
  metaKeywords     String[]
  ogTitle          String?
  ogDescription    String?
  ogImage          String?
  twitterCard      String?
  canonicalUrl     String?
  robots           String?
  
  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Component {
  id          String          @id @default(cuid())
  projectId   String?
  name        String
  type        ComponentType
  category    String
  props       Json            @default("{}")
  styles      Json            @default("{}")
  events      Json            @default("{}")
  children    Json            @default("[]")
  isGlobal    Boolean         @default(false)
  isLocked    Boolean         @default(false)
  version     String          @default("1.0.0")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  project     Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  instances   ComponentInstance[]
  
  @@index([projectId])
  @@index([type])
  @@index([isGlobal])
}

model ComponentInstance {
  id          String   @id @default(cuid())
  componentId String
  pageId      String?
  parentId    String?
  props       Json     @default("{}")
  styles      Json     @default("{}")
  order       Int      @default(0)
  
  component Component @relation(fields: [componentId], references: [id])
  
  @@index([componentId])
  @@index([pageId])
  @@index([parentId])
}

model Asset {
  id          String      @id @default(cuid())
  projectId   String
  name        String
  type        AssetType
  url         String
  size        Int
  mimeType    String
  metadata    Json        @default("{}")
  uploadedAt  DateTime    @default(now())
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([type])
}

model Api {
  id          String       @id @default(cuid())
  projectId   String
  name        String
  method      HttpMethod
  endpoint    String
  headers     Json         @default("{}")
  query       Json         @default("{}")
  body        Json         @default("{}")
  response    Json         @default("{}")
  auth        ApiAuthType?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
}

model Database {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  type        DatabaseType
  schema      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tables  Table[]
  
  @@index([projectId])
}

model Table {
  id          String   @id @default(cuid())
  databaseId  String
  name        String
  columns     Json
  indexes     Json     @default("[]")
  relations   Json     @default("[]")
  
  database Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  
  @@index([databaseId])
}

model Workflow {
  id          String         @id @default(cuid())
  projectId   String
  name        String
  description String?
  trigger     WorkflowTrigger
  nodes       Json
  edges       Json
  isActive    Boolean        @default(false)
  lastRunAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  executions  WorkflowExecution[]
  
  @@index([projectId])
}

model WorkflowExecution {
  id          String              @id @default(cuid())
  workflowId  String
  status      WorkflowStatus
  startedAt   DateTime            @default(now())
  completedAt DateTime?
  error       String?
  context     Json
  
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@index([workflowId])
  @@index([status])
}

model Deployment {
  id          String             @id @default(cuid())
  projectId   String
  userId      String
  version     String
  environment DeploymentEnvironment
  status      DeploymentStatus
  url         String?
  size        Int?               // Size in bytes
  buildLog    String?
  error       String?
  metadata    Json               @default("{}")
  startedAt   DateTime           @default(now())
  completedAt DateTime?
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  
  @@index([projectId])
  @@index([userId])
  @@index([status])
}

model Version {
  id          String   @id @default(cuid())
  projectId   String
  version     String
  changelog   String?
  snapshot    Json
  createdAt   DateTime @default(now())
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, version])
  @@index([projectId])
}

model Collaboration {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  pageId      String?
  cursor      Json
  selection   Json?
  isActive    Boolean  @default(true)
  lastSeenAt  DateTime @default(now())
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([userId])
}

model Plugin {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String
  version       String
  author        String
  icon          String?
  category      PluginCategory
  permissions   String[]
  config        Json           @default("{}")
  code          String
  isPublic      Boolean        @default(false)
  isVerified    Boolean        @default(false)
  downloads     Int            @default(0)
  rating        Float          @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  installations PluginInstallation[]
  
  @@index([slug])
  @@index([category])
}

model PluginInstallation {
  id          String   @id @default(cuid())
  pluginId    String
  projectId   String
  isActive    Boolean  @default(true)
  config      Json     @default("{}")
  installedAt DateTime @default(now())
  
  plugin Plugin @relation(fields: [pluginId], references: [id])
  
  @@unique([pluginId, projectId])
  @@index([projectId])
}

model Template {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String
  preview     String
  category    TemplateCategory
  tags        String[]
  config      Json
  isPublic    Boolean          @default(true)
  isFeatured  Boolean          @default(false)
  uses        Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@index([slug])
  @@index([category])
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  organizationId String?
  projectId   String?
  
  action      AuditAction
  resourceType String
  resourceId  String
  
  metadata    Json        @default("{}")
  ipAddress   String?
  userAgent   String?
  
  timestamp   DateTime    @default(now())
  
  user    User?     @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([organizationId])
  @@index([projectId])
  @@index([action])
  @@index([timestamp])
}

model Analytics {
  id          String        @id @default(cuid())
  projectId   String
  event       EventType
  pageId      String?
  sessionId   String
  userId      String?
  data        Json          @default("{}")
  timestamp   DateTime      @default(now())
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([event])
  @@index([timestamp])
}

model Notification {
  id          String              @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json                @default("{}")
  isRead      Boolean             @default(false)
  createdAt   DateTime            @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
}

// Enums
enum AuthProvider {
  GOOGLE
  GITHUB
  MICROSOFT
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrganizationRole {
  MEMBER
  ADMIN
  OWNER
}

enum PricingPlan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  PAUSED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SSOProvider {
  SAML
  OIDC
  AZURE_AD
  OKTA
  AUTH0
}

enum ExportType {
  PROJECT
  ORGANIZATION
  USER_DATA
  ANALYTICS
  AUDIT_LOGS
}

enum ExportFormat {
  JSON
  CSV
  ZIP
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProjectType {
  WEB
  MOBILE
  DESKTOP
  API
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
  UNLISTED
}

enum ProjectRole {
  VIEWER
  EDITOR
  ADMIN
  OWNER
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ComponentType {
  LAYOUT
  FORM
  DATA
  MEDIA
  NAVIGATION
  CUSTOM
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  FONT
  OTHER
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum ApiAuthType {
  NONE
  API_KEY
  BEARER
  BASIC
  OAUTH2
}

enum DatabaseType {
  POSTGRESQL
  MYSQL
  MONGODB
  SUPABASE
  FIREBASE
}

enum WorkflowTrigger {
  MANUAL
  SCHEDULE
  WEBHOOK
  EVENT
  API
}

enum WorkflowStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum DeploymentEnvironment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum DeploymentStatus {
  PENDING
  BUILDING
  DEPLOYING
  SUCCESS
  FAILED
  CANCELLED
}

enum PluginCategory {
  UI_COMPONENT
  DATA_SOURCE
  INTEGRATION
  ANALYTICS
  AUTOMATION
  SECURITY
  OTHER
}

enum TemplateCategory {
  LANDING_PAGE
  DASHBOARD
  E_COMMERCE
  BLOG
  PORTFOLIO
  ADMIN
  MOBILE_APP
  OTHER
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  EXPORT
  IMPORT
  PUBLISH
  DEPLOY
  SHARE
  LOGIN
  LOGOUT
  INVITE_SENT
  INVITE_ACCEPTED
  BILLING_UPDATED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELLED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  INVOICE_SENT
}

enum EventType {
  PAGE_VIEW
  COMPONENT_CLICK
  FORM_SUBMIT
  API_CALL
  ERROR
  CUSTOM
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  COLLABORATION
  DEPLOYMENT
  SYSTEM
  BILLING
  USAGE_LIMIT
  INVITATION
}